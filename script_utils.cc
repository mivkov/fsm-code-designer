#include <experimental/iterator>
#include <fstream>
#include <sstream>
#include <vector>
#include "script_utils.h"

std::string generatePythonCode(DFA dfa) {
	std::set<char>::iterator it;
	std::stringstream builder;
	std::vector<std::string> acceptors;

	std::set<char> alphabet = dfa.get_alphabet();
	dfa::states_t states = dfa.get_states();
	std::size_t num_states = states->num_states;
	dfa::transition_fn *transition_fn = dfa.get_transition_fn();
	std::string labels[num_states];
	for (std::size_t i = 0; i < num_states; i++) {
		labels[i] = states->states[i]->label;
		if (states->states[i]->accepting) {
			acceptors.push_back("'"+labels[i]+"'");
		}
	}

	builder << "#!/usr/bin/python" << "\n";
	builder << "# Autogenerated DFA code using fsm-code-designer" << "\n\n";
	builder << "import sys" << "\n\n";
	builder << "def run(string):" "\n";
	builder << "\t" << "'''" << "\n";
	builder << "\t" << "Runs the given DFA on a certain string" << "\n";
	builder << "\t" << "@param string: the string to run the DFA on" << "\n";
	builder << "\t" << "'''" << "\n";
	builder << "\t" << "curr = '" << labels[dfa.get_start()] << "'\n";
	builder << "\t" << "for c in string:" << "\n";
	for (it = alphabet.begin(); it != alphabet.end(); ++it) {
		for (std::size_t i = 0; i < num_states; i++) {
			builder << "\t\t" << "if c == '" << *it << "' and curr == '" << labels[i] << "':" << "\n";
			builder << "\t\t\t" << "curr = '" << labels[transition_fn(states, i, *it)] << "'\n";
			builder << "\t\t\t" << "continue" << "\n";
		}
	}
	builder << "\t" << "return curr in [";
	std::copy(acceptors.begin(), acceptors.end(), std::experimental::ostream_joiner<std::string>(builder, ", "));
	builder << "]" << std::endl;

	builder << "\n\n";
	builder << "if __name__ == '__main__':" << "\n";
	builder << "\t" << "if len(sys.argv) <= 1:" << "\n";
	builder << "\t\t" << "sys.exit('No string provided to run against.')" << "\n";
	builder << "\t" << "print(run(sys.argv[1]))" << std::endl;

	std::string generated = builder.str();
	return generated;
}

void writeCodeToFile(DFA dfa, std::string filename) {
	std::ofstream out (filename);
	out << generatePythonCode(dfa);
	out.close();
	return;
}
